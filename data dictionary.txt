# -*- coding: utf-8 -*-
"""PROJECT BOOTCAMP KELOMPOK 2

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QaMTANHCC3esJT18dHNkvQkzaZmJ0p0U
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_csv('Dataset Udemy.csv')

df.head()

df.describe()

df.info()

df.isnull().sum()

df.columns

df['is_paid'].value_counts()

import warnings
warnings.filterwarnings('ignore')

df['subject'].fillna(df['subject'].value_counts().index[0])
df.fillna(0, inplace=True)
df.isnull().sum()

filter5 = (df['num_subscribers'] == 0) & (df['num_reviews'] == 0) & (df['num_lectures'] == 0)
filter5.value_counts()

paid_courses = df[filter5]
display(paid_courses)

filter5

df[filter5]

country_wise = df['subject'].value_counts().reset_index()
country_wise.columns = ['subject', 'count']

country_wise

import plotly.express as px
subject_data = df.groupby('subject')['num_subscribers'].sum().reset_index()
subject_data.columns = ['subject', 'total_subscribers']
bar_chart = px.bar(
    subject_data,
    x='subject',
    y='total_subscribers',
    color='subject',
    title='Total Subscribers per Subject'
)

bar_chart.show()

plt.figure(figsize=(10, 6))
sns.countplot(data=df, x='subject')
plt.xticks(rotation=45)
plt.title('Jumlah Kursus per Subject')
plt.show()

data2 = df[df['is_paid'] == True]

plt.figure(figsize=(12, 8))
sns.boxplot(x="subject", y="price", hue="level", data=df)
plt.title('Harga Kursus Berdasarkan Subject dan Level')
plt.xlabel('Kategori Kursus (Subject)')
plt.ylabel('Harga (USD)')
plt.xticks(rotation=65)
plt.show()

!pip install sort_dataframeby_monthorweek
!pip install sorted-months-weekdays

data_business = df[(df['subject'] == 'Business Finance') & (df['is_paid'] == True)]
data_webdev = df[(df['subject'] == 'Web Development') & (df['is_paid'] == True)]

df['published_timestamp'] = pd.to_datetime(df['published_timestamp'], errors='coerce')
df['month'] = df['published_timestamp'].dt.month_name()
data_business = df[(df['subject'] == 'Business Finance') & (df['is_paid'] == True)]
data_webdev = df[(df['subject'] == 'Web Development') & (df['is_paid'] == True)]

rush_business = data_business['month'].value_counts().reset_index()
rush_business.columns = ['month', 'no_of_courses']

rush_webdev = data_webdev['month'].value_counts().reset_index()
rush_webdev.columns = ['month', 'no_of_courses']

final_rush = rush_business.merge(rush_webdev, on='month')
final_rush.columns = ['month', 'no_of_courses_business', 'no_of_courses_webdev']

import sort_dataframeby_monthorweek as sd
final_rush = sd.Sort_Dataframeby_Month(final_rush, 'month')

final_rush

px.line(data_frame=final_rush, x='month', y=['no_of_courses_business', 'no_of_courses_webdev'])

plt.figure(figsize=(10,5))
sns.barplot(
    x='month',
    y='price',
    data=df,
    hue='is_paid',
    estimator='mean',
    ci=None
)
plt.title('Rata-rata Harga Kursus per Bulan Berdasarkan Status Pembayaran', fontsize=10)
plt.xlabel('Bulan Publikasi Kursus')
plt.ylabel ('Harga Rata-rata (USD)')
plt.xticks(rotation=45)
plt.legend(title='Status Kursus')
plt.show()

def convert_duration_to_hours(duration):
    if isinstance(duration, str):
        duration = duration.lower()
        if 'hour' in duration:
            return float(duration.split(' ')[0])
        elif 'min' in duration:
            return float(duration.split(' ')[0]) / 60
        elif 'question' in duration:
            return 0  # Or some other appropriate value for questions
        elif duration == '0':
            return 0
    return 0 # Handle other potential non-string values

def course_length_type(row):
    # Use the converted duration
    if row['num_lectures'] < 10 and row['content_duration_hours'] < 2:
        return 'short_course'
    elif row['num_lectures'] >= 10 and row['content_duration_hours'] < 2:
        return 'many_videos_short_duration'
    elif row['num_lectures'] < 10 and row['content_duration_hours'] >= 2:
        return 'few_videos_long_duration'
    elif row['num_lectures'] >= 10 and row['content_duration_hours'] >= 2:
        return 'comprehensive_course'
    else:
        return 'undefined'

print(df['content_duration'].dtype)
print(df['content_duration'].unique())

data2['content_duration_hours'] = data2['content_duration'].apply(convert_duration_to_hours)
data2['course_length_type'] = data2.apply(course_length_type, axis=1)

display(data2[['content_duration', 'content_duration_hours', 'num_lectures', 'course_length_type']].head(3682))

df['content_duration_hours'] = df['content_duration'].apply(convert_duration_to_hours)
df['course_length_type'] = df.apply(course_length_type, axis=1)

group_data = df.groupby(['subject', 'course_length_type']).size().unstack().fillna(0)
group_data.plot(kind='bar', stacked=True, figsize=(12,8))
plt.title('Distribusi Kursus per Subject dan Tipe Panjang Kursus')
plt.xlabel('Kategori Subject')
plt.ylabel('Jumlah Kursus')
plt.show()

df['is_popular_paid'] = df.apply(
    lambda row: 1 if (row['is_paid'] == True) and (row['num_subscribers'] > 1000) else 0,
    axis=1
)

df[['is_paid', 'num_subscribers', 'is_popular_paid']].head()
df['is_popular_paid'].value_counts(normalize=True)

df['total_interactions'] = df['num_subscribers'] + df['num_reviews']
df['total_content'] = df['num_lectures'] + df['content_duration_hours']

dict1 = {'Free': 0, 'Paid': 1}
df['paid_flag'] = df['is_paid'].map(dict1)

columns_to_drop = ['num_subscribers', 'num_reviews', 'num_lectures', 'content_duration', 'is_paid']
existing_columns_to_drop = [col for col in columns_to_drop if col in df.columns]
df.drop(columns=existing_columns_to_drop, axis=1, inplace=True)



cate_features = [col for col in df.columns if df[col].dtype=='int64']
num_features=[col for col in df.columns if df[col].dtype!='int64']
num_features.append('content_duration_hours')

cate_features = ['subject', 'level', 'paid_flag', 'course_length_type']
data_cat = df[cate_features].copy()
data_cat['popularity_flag'] = df['is_popular_paid']

cols=data_cat.columns
cols=cols[0:-1]

for col in cols:
    dict2 = data_cat.groupby([col])['popularity_flag'].mean().to_dict()
    data_cat[col] = data_cat[col].map(dict2)

dataframe=pd.concat([data_cat,df[num_features]],axis=1)
display(dataframe.columns)

dataframe.drop(['popularity_flag'],axis=1,inplace=True)

sns.histplot(dataframe['content_duration_hours'])

def handle_outlier(col):
    dataframe[col] = np.log1p(dataframe[col])

# Convert 'price' to numeric, converting 'Free' to 0 and coercing errors
dataframe['price'] = pd.to_numeric(dataframe['price'], errors='coerce').fillna(0)

handle_outlier('content_duration_hours')
handle_outlier('price')

dataframe.dropna(axis=1, inplace=True)

sns.displot(dataframe['content_duration_hours'])

dataframe.dropna(inplace=True)

sns.displot(dataframe['price'])

df['price'] = pd.to_numeric(df['price'], errors='coerce').fillna(0)

sns.FacetGrid(df, hue='subject', height=5) \
   .map(sns.kdeplot, 'price', fill=True) \
   .add_legend()

numeric_dataframe = dataframe.select_dtypes(include=np.number)
corr = numeric_dataframe.corr()
corr['subject'].sort_values(ascending=False)

corr

corr['subject'].sort_values(ascending=False)

corr['subject'].sort_values(ascending=False).index

features_to_drop=['content_duration_hours',
       'total_content', 'course_length_type', 'level', 'price']

dataframe.shape

dataframe.dropna(inplace=True)

x=dataframe.drop('subject',axis=1)

y=df['subject']

cols=x.columns

x.columns

from sklearn.model_selection import train_test_split

# Select only numerical features from x
x_numeric = x.select_dtypes(include=np.number)

X_train, X_test, y_train, y_test = train_test_split(x_numeric, y, test_size=0.25, random_state=42)
X_train.shape

from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix

logreg = LogisticRegression(max_iter=1000) # Increase max_iter for convergence
logreg.fit(X_train, y_train)
pred = logreg.predict(X_test)

accuracy = accuracy_score(y_test, pred)
print(f"Akurasi yang Benar: {accuracy}")
conf_matr = confusion_matrix(y_test, pred)
print(f"Confusion Matrix yang Benar: {conf_matr}")

from sklearn.model_selection import cross_val_score

# Use the numerical features for cross-validation
score = cross_val_score(logreg, x_numeric, y, cv=10)
score.mean()

from sklearn.naive_bayes import GaussianNB
from sklearn.ensemble import RandomForestClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier

models = []
models.append(('LogisticRegression', LogisticRegression()))
models.append(('LogisticRegression',LogisticRegression()))
models.append(('Naive_bayes',GaussianNB()))
models.append(('Random Forest',RandomForestClassifier()))
models.append(('Decision_tree',DecisionTreeClassifier()))
models.append(('KNN',KNeighborsClassifier()))

for name,model in models:
    print(name)
    model.fit(X_train,y_train)

    predictions=model.predict(X_test)

    from sklearn.metrics import confusion_matrix
    cm=confusion_matrix(predictions,y_test)
    print(cm)

    from sklearn.metrics import accuracy_score
    acc=accuracy_score(predictions,y_test)
    print(acc)
    print('\n')

import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.metrics import confusion_matrix

# contoh: y_test dan predictions sudah ada dari model terakhir kamu
cm = confusion_matrix(y_test, predictions)

plt.figure(figsize=(6,5))
sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
plt.title('Confusion Matrix')
plt.xlabel('Predicted Label')
plt.ylabel('True Label')
plt.show()

